[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "blog-seo-analyzer"
version = "0.1.0"
description = "AI-powered blog SEO analysis tool with comprehensive content evaluation"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Blog SEO Analyzer Team", email = "team@blog-seo-analyzer.org"}
]
maintainers = [
    {name = "Blog SEO Analyzer Team", email = "team@blog-seo-analyzer.org"}
]
keywords = ["SEO", "blog", "analysis", "NLP", "content", "marketing"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]
requires-python = ">=3.9"
dependencies = [
    # Web Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    
    # Database & Caching
    "psycopg2-binary>=2.9.7",
    "redis>=5.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    
    # Async & Background Tasks
    "celery>=5.3.0",
    "aiohttp>=3.8.0",
    "httpx>=0.25.0",
    
    # Web Crawling & Scraping
    "beautifulsoup4>=4.12.0",
    "scrapy>=2.11.0",
    "selenium>=4.15.0",
    "playwright>=1.39.0",
    "requests>=2.31.0",
    
    # Korean NLP
    "konlpy>=0.6.0",
    "soynlp>=0.0.493",
    "kiwisolver>=1.4.0",
    
    # English & Multilingual NLP
    "spacy>=3.7.0",
    "nltk>=3.8.0",
    "transformers>=4.35.0",
    "sentence-transformers>=2.2.0",
    
    # Machine Learning & Analysis
    "scikit-learn>=1.3.0",
    "gensim>=4.3.0",
    "bertopic>=0.15.0",
    "yake>=0.4.8",
    "textstat>=0.7.3",
    
    # Deep Learning
    "torch>=2.1.0",
    "numpy>=1.24.0",
    "pandas>=2.1.0",
    
    # Data Visualization
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.17.0",
    
    # Monitoring & Logging
    "prometheus-client>=0.18.0",
    "sentry-sdk[fastapi]>=1.38.0",
    "structlog>=23.2.0",
    
    # Security & Validation
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    
    # Configuration & Environment
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "rich>=13.6.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.25.0",  # for testing FastAPI
    
    # Code Quality
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "bandit>=1.7.5",
    
    # Pre-commit
    "pre-commit>=3.5.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.23.0",
]

production = [
    "gunicorn>=21.2.0",
    "psycopg2>=2.9.7",
]

[project.urls]
Homepage = "https://github.com/blog-seo-analyzer/blog-seo-analyzer"
Documentation = "https://blog-seo-analyzer.readthedocs.io"
Repository = "https://github.com/blog-seo-analyzer/blog-seo-analyzer.git"
"Bug Tracker" = "https://github.com/blog-seo-analyzer/blog-seo-analyzer/issues"

[project.scripts]
blog-seo-analyzer = "blog_seo_analyzer.cli:main"

[tool.setuptools.packages.find]
where = ["backend"]
include = ["blog_seo_analyzer*"]

[tool.black]
target-version = ['py39', 'py310', 'py311']
line-length = 88
skip-string-normalization = true
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --cov=blog_seo_analyzer --cov-report=html --cov-report=term-missing"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
] 